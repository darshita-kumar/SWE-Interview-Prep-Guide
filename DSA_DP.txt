
Neet code :

1D dp :

- Climbing Stairs
        - Min Cost Climbing Stairs
- House Robber
        - House Robber II
- Longest Palindromic Substring - expand from middle
        - Palindromic Substrings
- Decode Ways : simple dp but challenging corner cases, need to do quicker
- Coin change : Min coins : Use long instead of int 
- Best Team With No Conflicts : a variation of longest increasing subsequence
- Longest Increasing Subsequence 
- Word Break : could only do top down
- Partition Equal Subset Sum : like knapsack (make a subset with sum = total/2)
- Maximum Product Subarray : hard for me


2D dp :

- Unique Paths : easy
- Longest Common Subsequence : easy 
- Coin Change II : easy
- Interleaving String
- Longest Increasing Path In a Matrix
- Distinct Subsequences
- Edit Distance
- Burst balloons : very hard, didnt quite understand how i did it
- Regular Expression Matching : tricky in base case
- Best Time to Buy and Sell Stock with Cooldown : didnt fully understand the issue in my code, copy pasted solution



GFG DP :

1. Longest common subsequence 
        only find length    
        2D
        Done

2. Coin change
        total number of combinations for given denominations   
        2D
        Done

3. Edit distance
        min operations to convert s1 to s2   
        2D
        Done

4. Longest increasing subsequence  
        #REVISE 
        1D
        Hint : Find Longest increasing subsequence ending at current element
        nlogn solution exists. 
        Hint : tail[i] = last element of LIS of length i+1, finding celeing and replacing in tail array
        multiple variations of LIS
        Done 


5. Maximum cute : 
        Given a rod and length of cuts, find the maximum cuts possible. 
        1D
        Done

6. Minimus Coins : 
        make an amount using minimun number of coins 
        Done 

7. Minimum jumps to reach the end of an array where each element represents the maximum jump you can make   
        Done

8. 0-1 Knapsack problem : Maximise total value of items for a fixied total weight 
        2D
        Done 

9. Optimal Stratergy for Game
        #REVISE
        #gap 
        Done (Only recursive with memoisation, still need to do DP)


10. Variations of Longest common subsequence  (REVISE) (Not done)

        - Diff Utility 
                Same as LCS 
        - Minimum insertions and deletions needed to convert s1 to s2 
                Find LCS and remaining 1 insertion and 1 deletion for each character
        - Shortest common super subsequence : 
                Find a 3rd string which has both s1 and s2 as subsequence  : find LCS and inser the extra characters
        
        - Longest palindromic subsequence : find a longest subsequence which is also a palindrome 
                Reverse s1 to get s2, find LCS of both 

        - Longest repeating subsequence AABB -> AB AB 
                in dp When characters match, they should not be at same index

        - Space Optimised LCS : with linear extra space 

        - Printing LCS 
                use the dp array 


11. Variations of Longest Increasing subsequence (REVISE) (Not done)

        - Min deletions to make an array sorted : same as LIS 

        - Maximum sum increasing subsequence : find an increasing subsequence whose sum is max 
                in LIS weight of each element is 1 bcz we taking length, here weight will be value 
                we store lenght of LIS at each index, there calculate weight instead 

        - Find maximum lenght of bitoix subsequence : first increasing then decreasing
                find LIS array and longest decreasing subsequence array (begining with every element)
                or reverse the array and find LIS 

                can be done in nlogn time withbinary search 


        - Building bridges 
                array of bridge connections, maximum bridges without crossing anyone [(1,2),(4,3)]
                sort the array based on first index, if its same then consider second index 
                now find LIS based on second value

        - Longest chain of pairs : 

                first ele is always smaller than then second ele
                chain shoudl be like (a,b)(c,d) such that b<c 

                sort the array acc to first value 
                do LIS (change in comparator)

                same as activity selection problem : use greedy 
        


12. Egg dropping : 2D dp and binary search (REVISE) (Done but TLE in leetcode, because did not use binary search)

13. Count number of unique BSTs for n number of nodes. Catalan number. (Not done)

14. Maximum sum in array with no consecutive elements (Not done)

15. Find number of subsets of an array having sum = s;    (Not done)

16. Matrix chain multiplication : number of operations needed to multiple #gap (Not done)
                
17. Palindrome partitioning #gap (Not done)

18. Allocate minimum pages (Not done)






